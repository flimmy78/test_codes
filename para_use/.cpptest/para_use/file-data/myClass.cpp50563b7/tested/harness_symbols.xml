<?xml version="1.0" encoding="UTF-8"?>
<Symbols version="2.0">
    <File name="e:\test_code\para_use\para_use\classBase.h" id="1"/>
    <File name="e:\test_code\para_use\para_use\myClass.cpp" id="2"/>
    <File name="e:\test_code\para_use\para_use\tests\autogenerated\Source Files\TestSuite_myClass_cpp.cpp" id="3"/>
    <Function id="_ZN9classBaseC9Ei" name="JclassBaseZ00FviZ" decorated_name="classBase::classBase(int)" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix> ::classBase::classBase (::</declaration_prefix>
         <declaration_suffix>_Dummy __CPTR_stub_ctor_param, int a) </declaration_suffix>
         <ctor_initializer>: m_baseValue(a)</ctor_initializer>
         <user_decl_header>classBase.h</user_decl_header>
      </stub_declaration>
      <definition type="orig" source="code" file_id="1" line="16" col="2"/>
    </Function>
    <Function id="_ZN9classBaseD9Ev" name="JclassBaseZ10FvvZ" decorated_name="classBase::~classBase(void)" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>void (::classBase::</declaration_prefix>
         <declaration_suffix>_Stub_destructor) (void) </declaration_suffix>
         <user_decl_header>classBase.h</user_decl_header>
      </stub_declaration>
    </Function>
    <Function id="_ZN7myClassC9Ei" name="HmyClassZ00FviZ" decorated_name="myClass::myClass(int)">
      <definition type="orig" source="code" file_id="2" line="10" col="10"/>
    </Function>
    <Function id="_ZN7myClassD9Ev" name="HmyClassZ10FvvZ" decorated_name="myClass::~myClass(void)">
      <definition type="orig" source="code" file_id="2" line="16" col="10"/>
    </Function>
    <Function id="_ZN7myClass11getIntValueEv" name="HmyClassZLgetIntValue0FivZ" decorated_name="int myClass::getIntValue(void)" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>int (::myClass::</declaration_prefix>
         <declaration_suffix>_Stub_getIntValue) (void) </declaration_suffix>
         <return_expression>return 0;</return_expression>
         <user_decl_header>myClass.h</user_decl_header>
      </stub_declaration>
      <definition type="orig" source="code" file_id="2" line="20" col="14"/>
    </Function>
    <Function id="_ZN7myClass8setValueEi" name="HmyClassZIsetValue0FviZ" decorated_name="void myClass::setValue(int)">
      <definition type="orig" source="code" file_id="2" line="30" col="15"/>
    </Function>
    <Function id="_ZN7myClass9addBigOneEii" name="HmyClassZJaddBigOne0FviiZ" decorated_name="void myClass::addBigOne(int, int)" stub_used="true">
      <stub_declaration complete="true">
         <declaration_prefix>void (::myClass::</declaration_prefix>
         <declaration_suffix>_Stub_addBigOne) (int a, int b) </declaration_suffix>
         <user_decl_header>myClass.h</user_decl_header>
      </stub_declaration>
      <definition type="orig" source="code" file_id="2" line="36" col="15"/>
    </Function>
    <Function id="_ZN7myClass11writeToFileEv" name="HmyClassZLwriteToFile0FvvZ" decorated_name="void myClass::writeToFile(void)">
      <definition type="orig" source="code" file_id="2" line="45" col="15"/>
    </Function>
    <Function id="printf" name="ZGprintf5X" decorated_name="int printf(const char *, ...)" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>extern &quot;C&quot; int __cdecl </declaration_prefix>
         <declaration_suffix>_Stub_printf (const char * _Format, ...) </declaration_suffix>
         <orig_declaration>extern &quot;C&quot; int __cdecl printf (const char * _Format, ...) </orig_declaration>
         <return_expression>return 0;</return_expression>
      </stub_declaration>
    </Function>
    <Function id="_Z8printStrPc" name="ZIprintStrFvPcZ" decorated_name="void printStr(char *)" stub_used="true" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>void </declaration_prefix>
         <declaration_suffix>_Stub_printStr (char * _MT_var5) </declaration_suffix>
         <orig_declaration>void printStr (char * _MT_var20) </orig_declaration>
      </stub_declaration>
    </Function>
    <Function id="TestSuite_myClass_cpp_684e9a73_testSuiteBegin" name="ZcNTestSuite_myClass_cpp_684e9a73_testSuiteBeginX" decorated_name="void TestSuite_myClass_cpp_684e9a73_testSuiteBegin(void)">
      <definition type="orig" source="code" file_id="3" line="77" col="1"/>
    </Function>
    <Function id="TestSuite_myClass_cpp_684e9a73_callTest" name="ZcHTestSuite_myClass_cpp_684e9a73_callTestX" decorated_name="int TestSuite_myClass_cpp_684e9a73_callTest(const char *)">
      <definition type="orig" source="code" file_id="3" line="77" col="1"/>
    </Function>
    <Function id="_ZNSt9exceptionD9Ev" name="DstdJexceptionZ1035FvvZ" decorated_name="virtual std::exception::~exception(void)" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>void (::std::exception::</declaration_prefix>
         <declaration_suffix>_Stub_destructor) (void) </declaration_suffix>
         <system_decl_header>exception</system_decl_header>
      </stub_declaration>
    </Function>
    <Function id="_ZNKSt9exception4whatEv" name="DstdJexceptionZEwhat035KFPKcvZ" decorated_name="virtual const char * std::exception::what(void) const" needed="true">
      <stub_declaration complete="true">
         <declaration_prefix>const char * (::std::exception::</declaration_prefix>
         <declaration_suffix>_Stub_what) (void)  const</declaration_suffix>
         <return_expression>return (const char *)0;</return_expression>
         <system_decl_header>exception</system_decl_header>
      </stub_declaration>
    </Function>
    <Pragma id="2953330773_0_27" type="comment_lib" value="msvcprtd"/>
</Symbols>

